<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>问题解决：springboot拦截器无法注入StringRedisTemplate</title>
    <link href="/2022/06/16/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%9Aspringboot%E6%8B%A6%E6%88%AA%E5%99%A8%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5StringRedisTemplate/"/>
    <url>/2022/06/16/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%9Aspringboot%E6%8B%A6%E6%88%AA%E5%99%A8%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5StringRedisTemplate/</url>
    
    <content type="html"><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>在学习Redis实战课程过程中，需要用拦截器实现登录验证功能，其需要从Redis中获取用户信息，大致功能逻辑如图</p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE/%E7%9F%AD%E4%BF%A1%E7%99%BB%E9%99%86-Redis%E6%8B%A6%E6%88%AA%E5%99%A8%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81-%E5%8A%9F%E8%83%BD%E9%80%BB%E8%BE%91.png" alt="image-20220615164223203" style="zoom:67%;" /><p>这里一个问题，拦截器里使用Redis时，自然需要使用 StringRedisTemplate ，然而发现不能在拦截器类 LoginInterceptor 注入 StringRedisTemplate，<font color=red>因为拦截器执行在bean实例化前执行的，拦截器会先加载，所以 StringRedisTemplate 还没有被实例化</font></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>报错信息：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">java.lang.NullPointerException: Cannot<span class="hljs-built_in"> invoke </span><span class="hljs-string">&quot;org.springframework.data.redis .core.StringRedisTemplate.opsForHash()&quot;</span> because <span class="hljs-string">&quot;this.stringRedisTemplate&quot;</span> is null<br>at com.hmdp.utils.LoginInterceptor.preHandle(LoginInterceptor.java:50) ~[classes/:na]<br></code></pre></td></tr></table></figure><h1 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h1><h2 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1 方法一"></a>2.1 方法一</h2><p>在 WebMvcConfigurer 里注入 StringRedisTemplate，并把 StringRedisTemplate 作为 LoginInterceptor 的一个属性，然后用有参构造函数传递到 LoginInterceptor 里去，也是黑马视频教程的用法</p><p>拦截器配置类：MvcConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 登录拦截器</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>(stringRedisTemplate))<br>                .excludePathPatterns(<br>...<br>                );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拦截器类：LoginInterceptor.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginInterceptor</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2 方法二"></a>2.2 方法二</h2><p>还是在拦截器类 LoginInterceptor 注入 StringRedisTemplate，现在知道拦截器执行是在bean实例化前执行的，那么我们就让拦截器执行的时候实例化拦截器Bean，在拦截器配置类里面先实例化拦截器，然后再获取 。我也实验了代码，确实可行</p><p>LoginInterceptor.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>MvcConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LoginInterceptor <span class="hljs-title function_">getLoginInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 登录拦截器</span><br>        registry.addInterceptor(getLoginInterceptor())<br>                .excludePathPatterns(<br>...<br>                );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：<a href="https://www.jb51.net/article/216067.htm">springboot拦截器无法注入redisTemplate的解决方法_java_脚本之家 (jb51.net)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试博客</title>
    <link href="/2022/06/16/Redis/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/06/16/Redis/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>测试</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>01.初始Redis</title>
    <link href="/2022/06/16/Redis/01.%20%E5%88%9D%E8%AF%86Redis/"/>
    <url>/2022/06/16/Redis/01.%20%E5%88%9D%E8%AF%86Redis/</url>
    
    <content type="html"><![CDATA[<p>参考资料：黑马Redis教程 </p><p><a href="https://www.bilibili.com/video/BV1cr4y1671t?spm_id_from=333.999.0.0">黑马程序员Redis入门到实战教程，全面透析redis底层原理+redis分布式锁+企业解决方案+redis实战</a></p><h1 id="一、认识NoSQL"><a href="#一、认识NoSQL" class="headerlink" title="一、认识NoSQL"></a>一、认识NoSQL</h1><p>略</p><h1 id="二、认识Redis"><a href="#二、认识Redis" class="headerlink" title="二、认识Redis"></a>二、认识Redis</h1><p>略</p><h1 id="三、安装Redis"><a href="#三、安装Redis" class="headerlink" title="三、安装Redis"></a>三、安装Redis</h1><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h2 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1. 单机安装Redis"></a>1. 单机安装Redis</h2><h3 id="1-1-安装Redis依赖"><a href="#1-1-安装Redis依赖" class="headerlink" title="1.1 安装Redis依赖"></a>1.1 安装Redis依赖</h3><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><h3 id="1-2-上传安装包并解压"><a href="#1-2-上传安装包并解压" class="headerlink" title="1.2 上传安装包并解压"></a>1.2 上传安装包并解压</h3><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B1.png"></p><p>例如，我放到了&#x2F;usr&#x2F;local&#x2F;src 目录：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B2.png"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxvf redis-6.2.6.tar.gz<br></code></pre></td></tr></table></figure><p>解压后：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B3.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> redis-6.2.6<br></code></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B4.png" alt="image-20211211080603710"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><p>cd</p><h3 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3 启动"></a>1.3 启动</h3><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h4 id="1-3-1-默认启动"><a href="#1-3-1-默认启动" class="headerlink" title="1.3.1 默认启动"></a>1.3.1 默认启动</h4><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B5.png" alt="image-20211211081716167"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h4 id="1-3-2-指定配置启动"><a href="#1-3-2-指定配置启动" class="headerlink" title="1.3.2 指定配置启动"></a>1.3.2 指定配置启动</h4><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B6.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cp</span> redis.<span class="hljs-keyword">conf</span> redis.<span class="hljs-keyword">conf</span>.bck<br></code></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123321</span><br></code></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis安装目录 </span><br><span class="hljs-built_in">cd</span> /usr/local/src/redis-6.2.6<br><span class="hljs-comment"># 启动</span><br>redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span><br><span class="hljs-comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123321 shutdown<br></code></pre></td></tr></table></figure><h4 id="1-3-3-开机自启"><a href="#1-3-3-开机自启" class="headerlink" title="1.3.3 开机自启"></a>1.3.3 开机自启</h4><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start redis<br><span class="hljs-comment"># 停止</span><br>systemctl stop redis<br><span class="hljs-comment"># 重启</span><br>systemctl restart redis<br><span class="hljs-comment"># 查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> redis<br></code></pre></td></tr></table></figure><h2 id="2-Redis客户端"><a href="#2-Redis客户端" class="headerlink" title="2. Redis客户端"></a>2. Redis客户端</h2><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h3 id="2-1-Redis命令行客户端"><a href="#2-1-Redis命令行客户端" class="headerlink" title="2.1 Redis命令行客户端"></a>2.1 Redis命令行客户端</h3><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B7.png" alt="image-20211211110439353"></p><h3 id="2-2-图形化桌面客户端"><a href="#2-2-图形化桌面客户端" class="headerlink" title="2.2 图形化桌面客户端"></a>2.2 图形化桌面客户端</h3><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><h4 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1 安装"></a>2.2.1 安装</h4><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B8.png" alt="image-20211214154938770"></p><p>解压缩后，运行安装程序即可安装，此处略。</p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B9.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B10.png" alt="image-20211214155406692"></p><h4 id="2-2-2-建立连接"><a href="#2-2-2-建立连接" class="headerlink" title="2.2.2 建立连接"></a>2.2.2 建立连接</h4><p>首先要开放linux里redis的端口，参考：<a href="https://blog.csdn.net/zhangtxsir/article/details/89607964">redis开启远程访问，centos7开放端口</a></p><p>开放完端口后重启redis</p><p>点击左上角的<code>连接到Redis服务器</code>按钮</p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B11.png" alt="image-20211211111614483"></p><p>点击确定后，在左侧菜单会出现链接，点击即可建立连接了：</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/Redis/Redis%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B12.png" alt="image-20211214155849495"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择 0号库</span><br>select 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/28/hello-world/"/>
    <url>/2022/03/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>新世界</title>
    <link href="/2021/03/28/%E6%96%B0%E4%B8%96%E7%95%8C/"/>
    <url>/2021/03/28/%E6%96%B0%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<p>这里是记录博客的新世界</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello world !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找法</title>
    <link href="/2021/03/28/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
    <url>/2021/03/28/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h1><h2 id="一、概念及其介绍"><a href="#一、概念及其介绍" class="headerlink" title="一、概念及其介绍"></a>一、概念及其介绍</h2><p>二分查找是一种在<strong>有序数组</strong>中查找某一特定元素的搜索算法。</p><h2 id="二、算法性能"><a href="#二、算法性能" class="headerlink" title="二、算法性能"></a>二、算法性能</h2><p>二分查找法只针对有序数组，查找次数为1+1+1+…+1，最多有logn的长度，所以复杂度为O(logn)</p><p>排序是二分查找法的前置条件，不将排序时间算在二分查找的时间复杂度里，但想运行二分查找确实需要考虑排序的时间。虽然排序是前置条件，比较耗时，但当多次查找时，仍然具有较低的复杂度。比如查找n次，排序只用1次，时间为nlogn，每次查找为logn，n次查找就是nlogn，合起来就是2nlogn，均摊复杂度就是2nlogn&#x2F;n &#x3D; 2logn，仍然是logn级别。</p><p>所以面对无序数组，多次查找仍然具有较低的时间复杂度，否则不排序每次都用线性查找，将是O(n^2)的复杂度</p><h2 id="三、实例代码"><a href="#三、实例代码" class="headerlink" title="三、实例代码"></a>三、实例代码</h2><h3 id="1-寻找一个数"><a href="#1-寻找一个数" class="headerlink" title="1. 寻找一个数"></a>1. 寻找一个数</h3><p>寻找一个数需要数组中无重复元素，否则极限情况下数组中都是目标数，那第一次就找到了。这种寻找一个数一般都默认数组中无重复元素，否则就是寻找边界问题。</p><p>二分查找只有一个思想，那就是：<strong>逐步缩小搜索区间</strong>。</p><p>使用 left 和 right 向中间靠拢的方法，有一个非常强的语义，那就是：当 left 与 right 重合的时候，我们就找到了问题的答案</p><p><img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%80%9D%E6%83%B3-%E7%BC%A9%E5%B0%8F%E6%90%9C%E7%B4%A2%E5%8C%BA%E9%97%B4.gif" alt="1639968622-EzQzeJ-binary-search-裁剪"></p><p>二分查找的边界细节是一个能很好理解循环不变量这一概念的例子，循环不变量分别是在<code>nums[l,r]</code>中查找和在<code>nums[l,r)</code>中查找。前者很好理解，是最基本的二分查找模型。代码如下：</p><p>循环不变量： 在<code>nums[l,r]</code>中查找</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 注意</span><br><br>    <span class="hljs-comment">//循环不变量是在nums[l,r]中查找target</span><br>    <span class="hljs-keyword">while</span>(l &lt;= r) &#123;        <span class="hljs-comment">// 注意，&lt;=时区间都不为空</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)<br>            <span class="hljs-keyword">return</span> mid; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>            l = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            r = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 元素不在区间返回-1  力扣704</span><br>    <span class="hljs-comment">// return l;  // 元素不在区间返回按顺序插入的位置，即left   力扣35</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而当循环不变量变为在<code>nums[l,r)</code>中查找时，右区间的开闭影响了：<code>r</code> 的初始值、循环条件、查找边界 <code>r</code> 的移动规则。之所以会在这三个地方有差别， 最主要的原因就是因为 <code>r</code> 的定义。右区间开的时候， <code>r</code> 所代表的位置实际上是要查找的数组的<strong>最后一个元素的后一个元素</strong>，是 <strong>不被</strong> 包括在循环以内的。正因如此，这三个地方应该改为：</p><ul><li><code>r</code> 的初始值改为<code>nums.length</code>，因为仍然希望遍历数组中所有元素，但因为右边是开的，所以要让r指向右边界的下一个位置，例如数组{1,2,3,4} 可写为区间[1,4]，也可写成区间[1,5)，但如果是区间[1,4)，则只能代表前三个元素。</li><li>循环条件应该改为<code>while(l &lt; r)</code>，因为当l&#x3D;r时，区间[l,r)是空区间，已经可以作为循环结束的条件了。</li><li>边界 <code>r</code> 的移动规则应改为<code>r = mid</code>，而不是之前的<code>r = mid-1</code>，因为当mid位置的元素大于target时，确定区间缩短为左半区，右边界确实应该为mid-1，但mid-1这个位置的值是要被索引到的，[l,mid-1)这样的区间是不能索引到mid-1位置的元素的，所以要和r的初始值一样，向右移动一位，即<code>r = mid</code>。</li></ul><p><strong>循环不变量的意义也在此体现</strong>，既然最开始就是左闭右开，那么后面每次循环都得是左闭右开，不能突然变成左闭右闭。每次循环中 l 和 r 共同约束了本次查找的范围， 要让本次循环与上一次循环查找的范围既不重复(重复了会引起死循环)， 也不遗漏， 并且要让 l 和 r 共同约束的查找的范围变得无意义时不再进行查找（即跳出 while）(否则会导致访问越界)</p><p>循环不变量：  在<code>nums[l,r)</code>中查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length;  <span class="hljs-comment">// 注意，由于右边是开区间，所以要让r大一个</span><br><br>    <span class="hljs-comment">//循环不变量是在nums[l,r)中查找target</span><br>    <span class="hljs-keyword">while</span>(l &lt; r) &#123;     <span class="hljs-comment">// 注意，由于右边是开区间，l=r已经为空，不能取=</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)<br>            <span class="hljs-keyword">return</span> mid; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>            l = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意，左区间是不变的</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            r = mid;    <span class="hljs-comment">// 注意，此时是要搜索到mid-1这个数，因为右边是开区间，所以r要改成mid</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-寻找左侧边界"><a href="#2-寻找左侧边界" class="headerlink" title="2. 寻找左侧边界"></a>2. 寻找左侧边界</h3><p>在<code>nums[l,r]</code>中查找target目标值的左侧边界</p><p>需要注意的是，找到一个 target，然后向左或向右线性搜索是不行的，因为这样难以保证二分查找对数级的复杂度了，比如最坏情况全是某一元素，这就是O(n)复杂度了</p><ul><li>还是原来的二分套路</li><li>当我们遇到目标值target时，不断更新右边界，向左收缩，<code>right = mid - 1</code>。终止时 left &#x3D; right+1 , 由于区间是不断向左收缩的，最后的 right 已经到左边界的前一位了，因此返回 left ，或者返回  right +1。（头脑里想象：都是相同的数字，right不断向左二分移动，不断向左收缩，left不变，终止时，right在左边界前一位）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">LeftBound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r-l)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target)<br>            r = mid - <span class="hljs-number">1</span>;       <span class="hljs-comment">// 注意，寻找左边界的要点，不断更新右边界，向左收缩</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)&#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)&#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关于 target 是否在数组内</strong></p><p>如果不考虑target 是否在数组内的话代码其实就已经结束了，返回的 left 不管怎么样都是这个元素按顺序应该插入的位置</p><ul><li>如果target 在数组内，返回的 left 就应该是左侧边界所在位置</li><li>如果target 不在数组内，返回的就是按顺序应插入的位置</li></ul><p>但大部分情况是，target 不在区间内返回-1，因此需要进行额外的判断</p><ul><li><p>正因为返回的 left 不管怎么样都是这个元素按顺序应该插入的位置，那么如果 nums[left] 和 target 不等，则说明 target 不在区间内，即<code>if(nums[left] != target)</code></p></li><li><p>因为用到了数组值nums[left]的比较，所以<strong>在这之前</strong>需要对 left  进行检查，防止数组越界。left什么情况下会越界？letf最小就是0，不会再比0小了，左侧不会越界。l 最大会是下图的情况 。此时，需要对left进行判断，<code>if (l &gt;= nums.length)</code>，返回-1</p>  <img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2-%E8%B6%8A%E7%95%8C.png" alt="image-20220122172457055" style="zoom: 50%;" /></li><li><p>注意<code>if (l &gt;= nums.length)</code>要放在<code>if(nums[left] != target)</code>之前判定，<code>if (l &gt;= nums.length)</code>逻辑上看起来像是防止target在区间右侧的情况，但其实它只是为了防止数组越界这一Java语法而设立的判定</p></li><li><p>事实上，因为终止条件是<code>left = right + 1</code>，我们也完全可以返回 right + 1 ，right + 1 是元素按顺序应该插入的位置，那么为了判定 target 是否在区间内就需要比较 <code>if(nums[right+1] != target)</code> ，同理，在这之前就应该先检查 right +1 是否会越界。right +1 什么情况下会越界？ 右侧是不可能的，因为 right 只可能减小，但左侧有可能，如下图。显然 right +1 &lt; 0 会导致数组左侧越界。返回-1  然后再判定 target 是否在区间内</p>  <img src="https://jswanyu-1309100582.cos.ap-shanghai.myqcloud.com/picgo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E5%8F%B3%E4%BE%A7%E8%BE%B9%E7%95%8C-%E8%B6%8A%E7%95%8C.png" alt="image-20220122190719199" style="zoom: 55%;" /></li><li><p>两种写法都是可以的，只不过一般左侧边界返回left看起来更合逻辑</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">LeftBound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r-l)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target)<br>            r = mid - <span class="hljs-number">1</span>;       <span class="hljs-comment">// 注意，寻找左边界的要点，不断更新右边界，向左收缩</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)&#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)&#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (l &gt;= nums.length)  <span class="hljs-comment">// 防止数组越界</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (nums[l] != target)  <span class="hljs-comment">// 检查target 是否在数组内</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/** 上面两个也可以合并，但注意要把越界写在||前面</span><br><span class="hljs-comment">    * if (l &gt;= nums.length || nums[l] != target)</span><br><span class="hljs-comment">    *     return -1;</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-寻找右侧边界"><a href="#3-寻找右侧边界" class="headerlink" title="3. 寻找右侧边界"></a>3. 寻找右侧边界</h3><p>在<code>nums[l,r]</code>中查找target目标值的右侧边界</p><ul><li>与左侧边界不同之处在于，当我们遇到目标值target时，向右进行偏移<code>left = mid + 1</code>.  终止时 left &#x3D; right+1 ,由于区间是不断向右收缩的，最后的left已经到右边界的下一位了，因此返回right，或者返回 letf-1。（头脑里想象：都是相同的数字，left不断向右二分移动，不断向右收缩，right不变，终止时，left在右边界下一位）</li><li>关于 target 是否在数组内的分析和左侧边界同理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">RightBound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r) &#123;    <span class="hljs-comment">// 终止条件： l = r +1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            l = mid + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 注意，寻找右边界的要点，不断更新左边界，向右收缩</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 先判断下标越界，在判断是否在数组内</span><br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span> || nums[r] != target) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>    <span class="hljs-comment">/* 如果是用l来表示则为：</span><br><span class="hljs-comment">    * left &lt;= 0 等价于 l-1 &lt; 0 即 l &lt; 1 </span><br><span class="hljs-comment">    if (left &lt;= 0 || nums[left-1] != target)</span><br><span class="hljs-comment">    return -1;</span><br><span class="hljs-comment">    return left - 1;</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-左闭右开区间"><a href="#4-左闭右开区间" class="headerlink" title="4. 左闭右开区间"></a>4. 左闭右开区间</h3><p>根据前面的分析，区间左闭右开只需改动三个地方</p><ul><li>右边界定义<code>r = nums.length</code></li><li>循环条件<code>while (l &lt; r)</code></li><li>左边界不动，右边界处理时<code>r = mid</code></li></ul><p><strong>越界条件变不变暂时不清楚，下面这两段代码先验证完没问题再说，主要就是越界不清楚对不对，网上代码众说纷纭，最好能找个代码测一下</strong></p><p>在<code>nums[l,r)</code>中查找target目标值的左侧边界，没有则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">left_bound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length;     <span class="hljs-comment">// 注意，右边为开区间，右边界为索引下一位</span><br>    <br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;          <span class="hljs-comment">// 注意，右边为开区间，停止条件是l=r，这样[l,r)为空，可以正确中止</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            r = mid;         <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            r = mid;         <span class="hljs-comment">// 注意</span><br>        &#125;<br>    &#125;<br><span class="hljs-keyword">if</span> (l &gt;= nums.length || nums[l] != target) <br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>nums[l,r)</code>中查找target目标值的右侧边界，没有则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">right_bound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br>    <br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;          <span class="hljs-comment">// 停止条件是l=r</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            l = mid + <span class="hljs-number">1</span>;     <span class="hljs-comment">// 注意,增大搜索区间的下界,向右收缩</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            r = mid;        <br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 这里不太肯定，等我找个题目验证下</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> nums[r-<span class="hljs-number">1</span>] == target ? (r-<span class="hljs-number">1</span>) : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
